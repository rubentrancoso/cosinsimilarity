server.port = 8080

# DataSource settings: set here your own configurations for the database 
# connection. In this example we have "netgloo_blog" as database name and 
# "root" as username and password.
# spring.datasource.url = jdbc:mysql://localhost:3306/home24
# spring.datasource.username = home24
# spring.datasource.password = 123456

# Keep the connection alive if idle for a long time (needed in production)
# spring.datasource.testWhileIdle = true
# spring.datasource.validationQuery = SELECT 1

# Show or not log for each sql query
# spring.jpa.show-sql = false

# Hibernate ddl auto (create, create-drop, update)
# spring.jpa.hibernate.ddl-auto = create-drop

# Naming strategy
# spring.jpa.hibernate.naming-strategy = org.hibernate.cfg.ImprovedNamingStrategy

# Use spring.jpa.properties.* for Hibernate native properties (the prefix is
# stripped before adding them to the entity manager)

# The SQL dialect makes Hibernate generate better SQL for the chosen database
# spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5Dialect



spring.datasource.driverClassName=org.h2.Driver
# spring.datasource.url=jdbc:h2:./h2data/re;DB_CLOSE_ON_EXIT=FALSE
spring.datasource.url = jdbc:h2:mem:home24;CACHE_SIZE=65536;LOCK_MODE=0;UNDO_LOG=0;DB_CLOSE_ON_EXIT=FALSE
# spring.datasource.url = jdbc:h2:~/home24;LOG=0;CACHE_SIZE=65536;LOCK_MODE=0;UNDO_LOG=0
#spring.datasource.username=sa
# spring.datasource.password=sa
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
spring.jpa.show-sql=false
spring.jpa.hibernate.ddl-auto=create-drop
spring.jpa.database=H2